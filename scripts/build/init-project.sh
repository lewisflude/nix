#!/usr/bin/env bash
# Enhanced Project Initialization Script
# Creates new projects with proper Nix development environments

set -euo pipefail

# Colors
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly YELLOW='\033[1;33m'
readonly RED='\033[0;31m'
readonly NC='\033[0m'

log_info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
log_success() { echo -e "${GREEN}✅ $1${NC}"; }
log_warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
log_error() { echo -e "${RED}❌ $1${NC}"; }

# Project templates
init_nextjs() {
  local project_name="$1"
  local use_typescript="${2:-true}"
  local use_tailwind="${3:-true}"

  log_info "Creating Next.js project: $project_name"

  # Copy environment template
  cp ~/.config/nix/shells/envrc-templates/nextjs "$project_name/.envrc"

  # Create package.json with modern setup
  cat > "$project_name/package.json" << EOF
{
  "name": "$project_name",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "biome lint .",
    "format": "biome format . --write",
    "check": "biome check .",
    "type-check": "tsc --noEmit"
  },
  "dependencies": {
    "next": "latest",
    "react": "latest",
    "react-dom": "latest"$(if [[ "$use_tailwind" == "true" ]]; then echo ',
    "tailwindcss": "latest",
    "@tailwindcss/typography": "latest"'; fi)
  },
  "devDependencies": {$(if [[ "$use_typescript" == "true" ]]; then echo '
    "typescript": "latest",
    "@types/react": "latest",
    "@types/react-dom": "latest",
    "@types/node": "latest",'; fi)
    "@biomejs/biome": "latest"
  }
}
EOF

  # Create configuration files
  if [[ "$use_typescript" == "true" ]]; then
    cat > "$project_name/tsconfig.json" << 'EOF'
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [{ "name": "next" }],
    "paths": { "@/*": ["./src/*"] }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
EOF
  fi

  if [[ "$use_tailwind" == "true" ]]; then
    cat > "$project_name/tailwind.config.js" << 'EOF'
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [require('@tailwindcss/typography')],
}
EOF

    mkdir -p "$project_name/styles"
    cat > "$project_name/styles/globals.css" << 'EOF'
@tailwind base;
@tailwind components;
@tailwind utilities;
EOF
  fi

  # Biome configuration
  cat > "$project_name/biome.json" << 'EOF'
{
  "$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
  "vcs": { "enabled": true, "clientKind": "git", "useIgnoreFile": true },
  "files": { "ignoreUnknown": false, "ignore": [] },
  "formatter": { "enabled": true, "indentStyle": "space" },
  "organizeImports": { "enabled": true },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true,
      "style": { "useNodejsImportProtocol": "off" }
    }
  },
  "javascript": { "formatter": { "quoteStyle": "single" } }
}
EOF

  # Create basic Next.js structure
  mkdir -p "$project_name/app"
  local ext="js"
  [[ "$use_typescript" == "true" ]] && ext="tsx"

  cat > "$project_name/app/layout.$ext" << EOF
$(if [[ "$use_typescript" == "true" ]]; then echo "import type { Metadata } from 'next'"; fi)
$(if [[ "$use_tailwind" == "true" ]]; then echo "import '../styles/globals.css'"; fi)

$(if [[ "$use_typescript" == "true" ]]; then echo "export const metadata: Metadata = {
  title: '$project_name',
  description: 'Generated by create-next-app',
}"; fi)

export default function RootLayout({
  children,
}$(if [[ "$use_typescript" == "true" ]]; then echo ": {
  children: React.ReactNode
}"; fi)) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
EOF

  cat > "$project_name/app/page.$ext" << EOF
export default function Home() {
  return (
    <main$(if [[ "$use_tailwind" == "true" ]]; then echo ' className="container mx-auto p-8"'; fi)>
      <h1$(if [[ "$use_tailwind" == "true" ]]; then echo ' className="text-4xl font-bold mb-4"'; fi)>
        Welcome to $project_name
      </h1>
      <p$(if [[ "$use_tailwind" == "true" ]]; then echo ' className="text-lg text-gray-600"'; fi)>
        Get started by editing app/page.$ext
      </p>
    </main>
  )
}
EOF

  # .gitignore
  cat > "$project_name/.gitignore" << 'EOF'
# Dependencies
/node_modules
/.pnp
.pnp.js

# Testing
/coverage

# Next.js
/.next/
/out/

# Production
/build

# Environment variables
.env*.local

# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# IDE
.vscode/
.idea/

# OS
.DS_Store
*.log
EOF
}

init_rust() {
  local project_name="$1"
  local is_binary="${2:-true}"

  log_info "Creating Rust project: $project_name"

  if [[ "$is_binary" == "true" ]]; then
    cargo init "$project_name" --name "$project_name"
  else
    cargo init "$project_name" --lib --name "$project_name"
  fi

  cd "$project_name"
  cp ~/.config/nix/shells/envrc-templates/rust .envrc

  # Enhanced Cargo.toml
  cat >> Cargo.toml << 'EOF'

[profile.dev]
opt-level = 0
debug = true
overflow-checks = true

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
strip = true
EOF

  # Create additional config files
  mkdir -p .cargo
  cat > .cargo/config.toml << 'EOF'
[build]
rustflags = ["-D", "warnings"]

[target.x86_64-unknown-linux-gnu]
rustflags = ["-C", "link-arg=-fuse-ld=lld"]
EOF

  # Create basic CI workflow
  mkdir -p .github/workflows
  cat > .github/workflows/ci.yml << 'EOF'
name: CI
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - run: cargo test --all-features
    - run: cargo clippy -- -D warnings
    - run: cargo fmt --check
EOF

  log_success "Rust project created with CI setup"
}

init_python() {
  local project_name="$1"
  local use_poetry="${2:-true}"

  log_info "Creating Python project: $project_name"

  mkdir -p "$project_name"
  cd "$project_name"
  cp ~/.config/nix/shells/envrc-templates/python .envrc

  if [[ "$use_poetry" == "true" ]]; then
    poetry init --no-interaction --name "$project_name" --author "Developer <dev@example.com>"
    poetry add --group dev pytest black isort mypy ruff
  else
    # Create requirements files
    cat > requirements.txt << 'EOF'
# Add your production dependencies here
EOF

    cat > requirements-dev.txt << 'EOF'
pytest
black
isort
mypy
ruff
EOF

    # Create setup.py
    cat > setup.py << EOF
from setuptools import setup, find_packages

setup(
    name="$project_name",
    version="0.1.0",
    packages=find_packages(),
    install_requires=[],
    extras_require={
        "dev": ["pytest", "black", "isort", "mypy", "ruff"]
    },
)
EOF
  fi

  # Create project structure
  mkdir -p "$project_name"
  touch "$project_name/__init__.py"

  cat > "$project_name/main.py" << 'EOF'
"""Main module for the application."""

def main() -> None:
    """Main entry point."""
    print("Hello, World!")

if __name__ == "__main__":
    main()
EOF

  mkdir -p tests
  cat > tests/__init__.py << 'EOF'
"""Tests for the application."""
EOF

  cat > tests/test_main.py << EOF
"""Tests for main module."""
from $project_name.main import main

def test_main():
    """Test main function."""
    # Add your tests here
    assert True
EOF

  # Configuration files
  cat > pyproject.toml << 'EOF'
[tool.black]
line-length = 88
target-version = ['py311']

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.ruff]
line-length = 88
target-version = "py311"
select = ["E", "F", "I", "N", "B", "A"]
EOF

  cat > .gitignore << 'EOF'
__pycache__/
*.py[cod]
*$py.class
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
.pytest_cache/
.coverage
htmlcov/
.tox/
.env
.venv/
venv/
ENV/
env/
EOF
}

# Main function
main() {
  if [[ $# -eq 0 ]]; then
    echo -e "${CYAN}🚀 Enhanced Project Initializer${NC}"
    echo
    echo "Usage: $0 <project-type> <project-name> [options...]"
    echo
    echo "Project types:"
    echo "  nextjs <name> [typescript=true] [tailwind=true]"
    echo "  rust <name> [binary=true]"
    echo "  python <name> [poetry=true]"
    echo
    echo "Examples:"
    echo "  $0 nextjs my-app"
    echo "  $0 rust my-cli true"
    echo "  $0 python my-project false"
    exit 1
  fi

  local project_type="$1"
  local project_name="$2"

  if [[ -z "$project_name" ]]; then
    log_error "Project name is required"
    exit 1
  fi

  if [[ -e "$project_name" ]]; then
    log_error "Directory '$project_name' already exists"
    exit 1
  fi

  mkdir -p "$project_name"

  case "$project_type" in
    "nextjs")
      init_nextjs "$project_name" "${3:-true}" "${4:-true}"
      ;;
    "rust")
      rmdir "$project_name" # cargo init will create it
      init_rust "$project_name" "${3:-true}"
      ;;
    "python")
      init_python "$project_name" "${3:-true}"
      ;;
    *)
      log_error "Unknown project type: $project_type"
      exit 1
      ;;
  esac

  log_success "Project '$project_name' created successfully!"
  log_info "Next steps:"
  echo "  cd $project_name"
  echo "  direnv allow"
  echo "  # Start developing!"
}

main "$@"
