---
description: Nix configuration development standards and patterns
globs: ["*.nix", "flake.*"]
alwaysApply: true
---

# Nix Development Standards

## Code Structure & Organization
- Use consistent 2-space indentation throughout all Nix files
- Organize attributes logically: inputs, outputs, configurations
- Group related configurations together (e.g., all development tools)
- Use meaningful attribute names that describe their purpose
- Separate concerns: keep language-specific configs in separate files

## Nix Expression Patterns
- Prefer `lib.mkMerge` for combining attribute sets
- Use `inherit` statements to reduce repetition
- Import shared constants/utilities from dedicated files
- Use `let...in` blocks for complex expressions
- Always use proper string interpolation with `${}`

## File Organization
- Keep `flake.nix` minimal, delegate to specialized modules
- Use `home/` for Home Manager configurations
- Use `hosts/` for system-specific configurations  
- Create `common/` directories for shared configurations
- Group apps by category: `apps/`, `development/`, `system/`

## Configuration Standards
- Define language standards in centralized files (like `language-standards.nix`)
- Use formatter mappings to maintain consistency across editors
- Avoid hardcoded paths, use `pkgs` references where possible
- Document complex expressions with inline comments
- Version control all configuration files

## Home Manager Patterns
- Structure user configurations hierarchically
- Use `programs` for application-specific settings
- Use `services` for daemon configurations
- Keep dotfiles management organized and consistent
- Test configurations before applying system-wide

## Error Prevention
- Always validate configuration syntax before commits
- Use meaningful variable names in let bindings
- Avoid deep nesting, prefer helper functions
- Handle optional attributes gracefully with `or` defaults
- Test configurations in isolated environments when possible

## Specific to This Project
- Follow the established directory structure with `home/common/`
- Use the centralized `language-standards.nix` for consistency
- Maintain separation between development tools and system config
- Keep Cursor/editor configs in dedicated app directories
- Use the established constants pattern for shared ignore lists